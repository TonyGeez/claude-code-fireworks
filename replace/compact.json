{
  "original_message": "Your task is to create a detailed summary of the conversation so far, paying close attention to the user's explicit requests and your previous actions.\nThis summary should be thorough in capturing technical details, code patterns, and architectural decisions that would be essential for continuing development work without losing context.\n\nBefore providing your final summary, wrap your analysis in <analysis> tags to organize your thoughts and ensure you've covered all necessary points. In your analysis process:\n\n1. Chronologically analyze each message and section of the conversation. For each section thoroughly identify:\n   - The user's explicit requests and intents\n   - Your approach to addressing the user's requests\n   - Key decisions, technical concepts and code patterns\n   - Specific details like:\n     - file names\n     - full code snippets\n     - function signatures\n     - file edits\n  - Errors that you ran into and how you fixed them\n  - Pay special attention to specific user feedback that you received, especially if the user told you to do something differently.\n2. Double-check for technical accuracy and completeness, addressing each required element thoroughly.\n\nYour summary should include the following sections:\n\n1. Primary Request and Intent: Capture all of the user's explicit requests and intents in detail\n2. Key Technical Concepts: List all important technical concepts, technologies, and frameworks discussed.\n3. Files and Code Sections: Enumerate specific files and code sections examined, modified, or created. Pay special attention to the most recent messages and include full code snippets where applicable and include a summary of why this file read or edit is important.\n4. Errors and fixes: List all errors that you ran into, and how you fixed them. Pay special attention to specific user feedback that you received, especially if the user told you to do something differently.\n5. Problem Solving: Document problems solved and any ongoing troubleshooting efforts.\n6. All user messages: List ALL user messages that are not tool results. These are critical for understanding the users' feedback and changing intent.\n6. Pending Tasks: Outline any pending tasks that you have explicitly been asked to work on.\n7. Current Work: Describe in detail precisely what was being worked on immediately before this summary request, paying special attention to the most recent messages from both user and assistant. Include file names and code snippets where applicable.\n8. Optional Next Step: List the next step that you will take that is related to the most recent work you were doing. IMPORTANT: ensure that this step is DIRECTLY in line with the user's most recent explicit requests, and the task you were working on immediately before this summary request. If your last task was concluded, then only list next steps if they are explicitly in line with the users request. Do not start on tangential requests or really old requests that were already completed without confirming with the user first.\n                       If there is a next step, include direct quotes from the most recent conversation showing exactly what task you were working on and where you left off. This should be verbatim to ensure there's no drift in task interpretation.\n\nHere's an example of how your output should be structured:\n\n<example>\n<analysis>\n[Your thought process, ensuring all points are covered thoroughly and accurately]\n</analysis>\n\n<summary>\n1. Primary Request and Intent:\n   [Detailed description]\n\n2. Key Technical Concepts:\n   - [Concept 1]\n   - [Concept 2]\n   - [...]\n\n3. Files and Code Sections:\n   - [File Name 1]\n      - [Summary of why this file is important]\n      - [Summary of the changes made to this file, if any]\n      - [Important Code Snippet]\n   - [File Name 2]\n      - [Important Code Snippet]\n   - [...]\n\n4. Errors and fixes:\n    - [Detailed description of error 1]:\n      - [How you fixed the error]\n      - [User feedback on the error if any]\n    - [...]\n\n5. Problem Solving:\n   [Description of solved problems and ongoing troubleshooting]\n\n6. All user messages: \n    - [Detailed non tool use user message]\n    - [...]\n\n7. Pending Tasks:\n   - [Task 1]\n   - [Task 2]\n   - [...]\n\n8. Current Work:\n   [Precise description of current work]\n\n9. Optional Next Step:\n   [Optional Next step to take]\n\n</summary>\n</example>\n\nPlease provide your summary based on the conversation so far, following this structure and ensuring precision and thoroughness in your response. \n\nThere may be additional summarization instructions provided in the included context. If so, remember to follow these instructions when creating the above summary. Examples of instructions include:\n<example>\n## Compact Instructions\nWhen summarizing the conversation focus on typescript code changes and also remember the mistakes you made and how you fixed them.\n</example>\n\n<example>\n# Summary instructions\nWhen you are using compact - please focus on test output and code changes. Include file reads verbatim.\n</example>\n",
  "updated_message": "Create a focused development checkpoint that enables seamless continuation of the current coding session, prioritizing technical state over conversation history.## Checkpoint Structure### 1. Current Technical State [REQUIRED]**Active Development Context:**- **Current File**: [filename] - [brief description of pending changes]- **Last Action**: [what you were doing when interrupted]- **Immediate Next Step**: [exact next line of code or action to take]**Code Snapshot:**```context[Last 10-15 lines of relevant code with cursor position marked]```### 2. Technical Constraints & Decisions [CRITICAL]**Architecture Pattern**: [established pattern/convention]**Key Constraints**:- [Constraint 1: e.g., \"Using React hooks only, no class components\"]- [Constraint 2: e.g., \"Must maintain TypeScript strict mode\"]**Recent Decisions**: [last 2-3 technical decisions that affect continuation]### 3. Pending Stack [ORDERED]**Current Task**: [active task with 1-line description]**Next Tasks** (in dependency order):1. [Task 1 - depends on current task]2. [Task 2 - can start after Task 1]3. [Task 3 - parallelizable]### 4. Blockers & Context [IF APPLICABLE]**Active Issues**:- [Issue]: [status/resolution needed]**User Feedback**: [last piece of directional feedback from user]### 5. Quick Reference [OPTIONAL]**Last Error**: [error + fix if recent]**Key Files**: [list of 3-5 most relevant files with 1-word purpose]## Usage Instructions1. **For AI**: Fill sections 1-3 completely before any continuation2. **For User**: Review section 1 for accuracy, sections 2-3 for alignment3. **For Complex Sessions**: Add section 5 only if debugging across multiple files## Example Output```checkpoint### 1. Current Technical State**Active Development Context:**- **Current File**: `src/components/Dashboard.tsx` - implementing real-time data updates- **Last Action**: Created useEffect hook for WebSocket connection- **Immediate Next Step**: Add error handling for connection failures**Code Snapshot:**```typescriptuseEffect(() => {const ws = new WebSocket('ws://localhost:3001');ws.onmessage = (event) => {const data = JSON.parse(event.data);setMetrics(data);};// TODO: Add error handling herereturn () => ws.close();}, []);```### 2. Technical Constraints & Decisions**Architecture Pattern**: React functional components with hooks**Key Constraints**:- TypeScript strict mode enabled- Using Recharts for data visualization**Recent Decisions**: WebSocket over polling for real-time updates### 3. Pending Stack**Current Task**: Implement WebSocket error handling and reconnection logic**Next Tasks**:1. Add loading states for initial connection2. Implement data transformation for chart compatibility3. Add unit tests for WebSocket hook### 4. Blockers & Context**Active Issues**: None**User Feedback**: \"Focus on robust error handling before adding features\"```</checkpoint>## Compact ModeFor simple sessions, use:```File: [filename] - [current task]Next: [immediate next action]Context: [key constraint/decision]```"
}
